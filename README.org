#+TITLE: Serving solutions with authentication

This is a quick example of how to serve solutions with authentication, i.e. what you might call apps or SaaS tools.

The intent is to have a common landing page, but capabilities provided by different groups, be they divisions in a company, or just conceptual (i.e. media, gaming) for a home network.

This is using [[https://www.authelia.com/][Authelia]] to provide authentication.  To use another SSO tool, you will need to edit the [[https://traefik.io/][Traefik]] configurations.

* The site
Once you have this running visit https://dev.example.com/

* Tools
This setup uses the following tools.  However, don't worry, the *Docker containers* are automatically downloaded, nothing is installed on your machine.

- [[https://traefik.io/][Traefik]] :: Traefik is a leading modern reverse proxy and load balancer that makes deploying microservices easy
- [[https://www.authelia.com/][Authelia]] :: The Single Sign-On Multi-Factor portal for web apps
- [[https://github.com/bastienwirtz/homer][Homer]] :: A dead simple static HOMepage for your servER
- [[https://github.com/brndnmtthws/nginx-echo-headers][nginx-echo-headers]] :: Return all HTTP request headers and body to the client
- [[https://hub.docker.com/_/httpd/][httpd]] :: The Apache HTTP Server Project

* Setting up domains

In a live deployment you would need to changing ~dnsmasq~ or add a wildcard host to your the DNS record.

However, for a test deployment edit your =/etc/hosts= for Linux or MacOS, or follow [[https://duckduckgo.com/?t=ffab&q=edit+hosts+file+in+windows+10][these instructions]] for Windows.

Add the following hosts:

#+begin_example
# Admin related sites
127.0.0.1       dev.example.com                 traefik.dev.example.com         authelia.dev.example.com
# Tools managed by Group 1
127.0.0.1       tool1.group1.dev.example.com    tool2.group1.dev.example.com
# Tools managed by Group 2
127.0.0.1       rapid.group2.dev.example.com    mineit.group2.dev.example.com
#+end_example

* Add users

Sample user accounts are set in =services/authelia/users_database.yml=.

Follow the sample layout:

#+begin_example
  aperson:
    disabled: false
    displayname: "A Person"
    # password is 'test'
    password: "$argon2id$v=19$m=65536,t=3,p=4$8Duc6xBxO6rFgGvCL8DNLw$mi3c2+PbD5RG9Q6K7ORxls2uuNx8u//+5VdAUEgWn0Q"
    email: person@example.com
    groups:
      - people
      - admin
#+end_example

Generate hashed password information with the following command:
#+begin_src shell
  docker run authelia/authelia authelia crypto hash generate argon2 --password $PASSWORD | sed 's/Digest: //g'
#+end_src

* Start/stop/observe the environment
** Run this ONLY ONCE
Initially you will need to set up a couple of Docker related things.  Firstly the internal network that containers will use to communicate with each other:

#+begin_src shell
  docker network create traefik-public
#+end_src

Then a volume (think virtual disk) for [[https://github.com/bastienwirtz/homer][Homer]] to store some configuration:

#+begin_src shell
  docker volume create --name=homer_assets
#+end_src

You will only need to run the above commands once
** Regular running commands
Starting the docker environment is as simple as
#+begin_src shell
  docker-compose up -d
#+end_src

To display the logs use
#+begin_src shell
  docker-compose logs -f
#+end_src

Finally, stopping is
#+begin_src shell
  docker-compose down
#+end_src

* Configuration files

If you want to play around with the configuration the following files will be of interest

- =.env= :: Environment variables used by ~docker-compose~
- =docker-compose.yml= :: Configuration for the various tools that are run
- =services/homer/config.yml= :: Configuration for the homepage
- =services/authelia/users_database.yml= :: Add users for the demo
- =services/authelia/configuration.yml= :: Configure access to the various hosts
